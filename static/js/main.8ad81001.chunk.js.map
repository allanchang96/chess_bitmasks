{"version":3,"sources":["index.js"],"names":["Square","props","checkerPattern","Array","fill","i","j","click","className","onClick","style","backgroundColor","value","Board","state","a","b","length","carry","res","sum","this","setState","newClick","slice","values","push","stringAdd","buffer","component","renderSquare","clear","React","Component","ReactDOM","render","document","getElementById"],"mappings":"+MAgBA,SAASA,EAAOC,GAGd,IADA,IAAIC,EAAiBC,MAAM,IAAIC,KAAK,SAC5BC,EAAI,EAAGA,EAAI,EAAGA,IAEpB,IADA,IACQC,EADOD,EAAI,EAAK,EAAI,EACTC,EAAI,EAAGA,GAAK,EAC7BJ,EAAe,EAAIG,EAAIC,GAAK,OAIhC,IAAI,IAAID,EAAI,EAAGA,EAAI,GAAIA,IAClBJ,EAAMM,MAAMF,KACbH,EAAeG,GAAK,OAGxB,OACE,wBACEG,UAAY,SACZC,QAAWR,EAAMQ,QACjBC,MAAS,CAACC,gBAAiBT,EAAeD,EAAMW,U,IAKhDC,E,kDAEJ,WAAYZ,GAAO,IAAD,8BAChB,cAAMA,IACDa,MAAQ,CACXP,MAAOJ,MAAM,IAAIC,MAAK,IAHR,E,6CAOlB,SAAUW,EAAGC,GAKX,IAJA,IAAIX,EAAIU,EAAEE,OAAS,EACfX,EAAIU,EAAEC,OAAS,EACfC,EAAQ,EACRC,EAAM,GACJd,GAAK,GAAKC,GAAK,GAAKY,GAAM,CAC9B,IAAIE,EAAM,EACPf,GAAK,IACNe,GAAOL,EAAEV,GAAK,KAEbC,GAAK,IACNc,GAAOJ,EAAEV,GAAK,MAEhBc,GAAOF,IACG,IACRA,EAAQ,EACRE,GAAO,IAGPF,EAAQ,EAEVb,IACAC,IACAa,EAAMC,EAAMD,EAEd,OAAOA,I,mBAGT,WACEE,KAAKC,SAAS,CACZf,MAAQJ,MAAM,IAAIC,MAAK,O,0BAI3B,SAAaC,GAAG,IAAD,OACb,OAAO,cAACL,EAAD,CAEPY,MAASP,EACTE,MAASc,KAAKP,MAAMP,MACpBE,QAAW,WACT,IAAIc,EAAW,EAAKT,MAAMP,MAAMiB,QAChCD,EAASlB,IAAMkB,EAASlB,GACxB,EAAKiB,SAAS,CACZf,MAAQgB,MAPLlB,K,oBAaT,WAGE,IAHQ,IAAD,OAEHoB,EAAS,CAAC,KACNpB,EAAI,EAAGA,EAAI,GAAIA,IACrBoB,EAAOC,KAAKL,KAAKM,UAAUF,EAAOpB,EAAI,GAAIoB,EAAOpB,EAAI,KAKvD,IADA,IAAIuB,EAAS,GACLvB,EAAI,EAAGA,EAAI,EAAGA,IAAI,CAExB,IADA,IAAIwB,EAAY,GACRvB,EAAI,EAAGA,EAAI,EAAGA,IACpBuB,EAAUH,KAAKL,KAAKS,aAAa,EAAIzB,EAAIC,IAE3CsB,EAAOF,KAAK,qBAAKlB,UAAU,YAAf,SAAoCqB,GAAJxB,IAI9C,IAAIe,EAAM,IAEV,GADeC,KAAKP,MAAMP,MAAM,IAQ5B,CACF,IAAI,IAAIF,EAAI,EAAGA,EAAI,GAAIA,IACjBgB,KAAKP,MAAMP,MAAMF,KACnBe,EAAMC,KAAKM,UAAUP,EAAKK,EAAOpB,KAIrCe,EAAM,KADNA,EAAMC,KAAKM,UAAUP,EAAK,WAZ1B,IAAI,IAAIf,EAAI,EAAGA,EAAI,GAAIA,IAClBgB,KAAKP,MAAMP,MAAMF,KAClBe,EAAMC,KAAKM,UAAUP,EAAKK,EAAOpB,KAkBvC,OALU,gCACPuB,EACD,8BAAMR,IACN,8BAAK,wBAAQX,QAAW,kBAAM,EAAKsB,SAA9B,4B,GAjGSC,IAAMC,WAyG1BC,IAASC,OACP,cAACtB,EAAD,IACAuB,SAASC,eAAe,W","file":"static/js/main.8ad81001.chunk.js","sourcesContent":["/* Creates an interactive webpage where clicking on chess bitboard\n * generates the twos complement equivalent for the bitboard\n * https://github.com/SFU-Open-Source-Development/chess-engine\n * Useful to quickly generate bitmasks visually\n *\n * Author: Allan Chang\n *\n * Original code: \n * Source: https://reactjs.org/tutorial/tutorial.html\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction Square(props){\n  // Generate checker pattern\n  let checkerPattern = Array(64).fill('white');\n  for(let i = 0; i < 8; i++){\n    const start = (i % 2) ? 0 : 1\n    for(let j = start; j < 8; j += 2){\n      checkerPattern[8 * i + j] = 'grey';\n    }\n  }\n  // Check highlighted squares\n  for(let i = 0; i < 64; i++){\n    if(props.click[i]){\n      checkerPattern[i] = 'red';\n    }\n  }\n  return (\n    <button \n      className = \"square\" \n      onClick = {props.onClick}\n      style = {{backgroundColor: checkerPattern[props.value]}}>\n    </button>\n  )\n}\n\nclass Board extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      click: Array(64).fill(false),\n    }\n  }\n\n  stringAdd(a, b){\n    let i = a.length - 1;\n    let j = b.length - 1;\n    let carry = 0;\n    let res = \"\";\n    while(i >= 0 || j >= 0 || carry){\n      let sum = 0;\n      if(i >= 0){\n        sum += a[i] - '0';\n      }\n      if(j >= 0){\n        sum += b[j] - '0';\n      }\n      sum += carry;\n      if(sum >= 10){\n        carry = 1;\n        sum -= 10;\n      }\n      else{\n        carry = 0;\n      }\n      i--;\n      j--;\n      res = sum + res;\n    }\n    return res;\n  }\n\n  clear(){\n    this.setState({\n      click : Array(64).fill(false),\n    });\n  }\n\n  renderSquare(i){\n    return <Square\n    key = {i}\n    value = {i}\n    click = {this.state.click}\n    onClick = {() => {\n      let newClick = this.state.click.slice();\n      newClick[i] = !newClick[i];\n      this.setState({\n        click : newClick,\n      })\n    }}\n    />;\n  }\n\n  render() {\n    // Compute the value of the bit\n    let values = ['1'];\n    for(let i = 1; i < 64; i++){\n      values.push(this.stringAdd(values[i - 1], values[i - 1]));\n    }\n\n    // Set up the board\n    let buffer = [];\n    for(let i = 0; i < 8; i++){\n      let component = [];\n      for(let j = 0; j < 8; j++){\n        component.push(this.renderSquare(8 * i + j));\n      }\n      buffer.push(<div className='board-row' key={i}>{component}</div>)\n    }\n\n    // Compute twos complement\n    let sum = '0';\n    let negative = this.state.click[63];\n    if(!negative){\n      for(let i = 0; i < 63; i++){\n        if(this.state.click[i]){\n          sum = this.stringAdd(sum, values[i]);\n        }\n      }\n    }\n    else{\n      for(let i = 0; i < 63; i++){\n        if(!this.state.click[i]){\n          sum = this.stringAdd(sum, values[i]);\n        }\n      }\n      sum = this.stringAdd(sum, '1');\n      sum = '-' + sum;\n    }\n    let res = <div>\n      {buffer}\n      <div>{sum}</div>\n      <div><button onClick = {() => this.clear()}>CLEAR</button></div>\n    </div>\n    return res;\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Board />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}