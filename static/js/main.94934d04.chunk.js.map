{"version":3,"sources":["index.js"],"names":["Square","props","color","row","Math","floor","value","click","className","onClick","style","backgroundColor","Label","border","zIndex","Board","state","Array","fill","a","b","i","length","j","carry","res","sum","this","setState","newClick","slice","values","push","stringAdd","buffer","component","renderSquare","renderLabel","alphaLabel","String","fromCharCode","charCodeAt","clear","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94934d04.chunk.js","sourcesContent":["/* Creates an interactive webpage where clicking on chess bitboard\n * generates the twos complement equivalent for the bitboard\n * https://github.com/SFU-Open-Source-Development/chess-engine\n * Useful to quickly generate bitmasks visually\n *\n * Author: Allan Chang\n *\n * Original code: \n * Source: https://reactjs.org/tutorial/tutorial.html\n */\n\nimport { waitForElementToBeRemoved } from '@testing-library/dom';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction Square(props){\n\n  let color = 'white';\n  // get row number\n  let row = Math.floor(props.value / 8);\n  if(props.click[props.value]){\n    color = 'red';\n  }\n  else if((row % 2 === 0 && props.value % 2 === 1) || row % 2 === 1 && props.value % 2 === 0){\n    color = 'grey';\n  }\n  return (\n    <button \n      className = 'square' \n      onClick = {props.onClick}\n      style = {{backgroundColor: color}}>\n    </button>\n  )\n}\n\nfunction Label(props){\n  return (\n    <div\n      className ='square'\n      style = {{border: 0, zIndex: -1}}>\n        {props.value}\n    </div>\n  )\n}\n\nclass Board extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      click: Array(64).fill(false),\n    }\n  }\n\n  stringAdd(a, b){\n    let i = a.length - 1;\n    let j = b.length - 1;\n    let carry = 0;\n    let res = \"\";\n    while(i >= 0 || j >= 0 || carry){\n      let sum = 0;\n      if(i >= 0){\n        sum += a[i] - '0';\n      }\n      if(j >= 0){\n        sum += b[j] - '0';\n      }\n      sum += carry;\n      if(sum >= 10){\n        carry = 1;\n        sum -= 10;\n      }\n      else{\n        carry = 0;\n      }\n      i--;\n      j--;\n      res = sum + res;\n    }\n    return res;\n  }\n\n  clear(){\n    this.setState({\n      click : Array(64).fill(false),\n    });\n  }\n\n  renderLabel(i){\n    return <Label\n      key = {i}\n      value = {i}\n      />\n  }\n\n  renderSquare(i){\n    return <Square\n    key = {i}\n    value = {i}\n    click = {this.state.click}\n    onClick = {() => {\n      let newClick = this.state.click.slice();\n      newClick[i] = !newClick[i];\n      this.setState({\n        click : newClick,\n      })\n    }}\n    />;\n  }\n\n  render() {\n    // Compute the value of the bit\n    let values = ['1'];\n    for(let i = 1; i < 64; i++){\n      values.push(this.stringAdd(values[i - 1], values[i - 1]));\n    }\n\n    // Set up the board\n    let buffer = [];\n    for(let i = 0; i < 8; i++){\n      let component = [];\n      for(let j = 0; j < 8; j++){\n        component.push(this.renderSquare(8 * i + j));\n      }\n      component.push(this.renderLabel(8 - i));\n      buffer.push(<div className='board-row' key={i}>{component}</div>)\n    }\n    let alphaLabel = [];\n    for(let i = 0; i < 8; i++){\n      alphaLabel.push(this.renderLabel(String.fromCharCode(i + 'a'.charCodeAt(0))));\n    }\n    buffer.push(<div className='board-row' key={8}>{alphaLabel}</div>)\n\n    // Compute twos complement\n    let sum = '0';\n    let negative = this.state.click[63];\n    if(!negative){\n      for(let i = 0; i < 63; i++){\n        if(this.state.click[i]){\n          sum = this.stringAdd(sum, values[i]);\n        }\n      }\n    }\n    else{\n      for(let i = 0; i < 63; i++){\n        if(!this.state.click[i]){\n          sum = this.stringAdd(sum, values[i]);\n        }\n      }\n      sum = this.stringAdd(sum, '1');\n      sum = '-' + sum;\n    }\n    let res = <div>\n      <div className = 'board'>{buffer}</div>\n      <div>{sum}</div>\n      <div><button onClick = {() => this.clear()}>CLEAR</button></div>\n    </div>\n    return res;\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Board />,\n  document.getElementById('root')\n);"],"sourceRoot":""}